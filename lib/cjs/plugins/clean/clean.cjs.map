{"version":3,"file":"clean.cjs","sources":["../../../../src/plugins/clean/clean.js"],"sourcesContent":["import { dirname } from \"path\";\r\n\r\nimport isArray from \"../../utils/internal/isArray.js\";\r\nimport isString from \"../../utils/internal/isString.js\";\r\nimport performClean from \"./performClean.js\";\r\n\r\n/**\r\n * A plugin to clean paths as part of a Rollup build.\r\n *\r\n * By default, if no `paths` are supplied, this uses the `output.dir` or the `output.file` {@link https://rollupjs.org/configuration-options/|configuration options}\r\n * in the {@link https://rollupjs.org/plugin-development/#renderstart|renderStart} hook to automatically find the path to clean as this is\r\n * the earliest the {@link https://rollupjs.org/javascript-api/#outputoptions-object|output options} object is made available to hooks.\r\n *\r\n * If the `paths` are supplied, the {@link https://rollupjs.org/javascript-api/#outputoptions-object|output options} are no longer needed\r\n * so the clean is performed in the earlier {@link https://rollupjs.org/plugin-development/#buildstart|buildStart} hook.\r\n *\r\n * @param {string[]} [paths] - Optional. A string array of paths to clean. Defaults to `undefined`.\r\n * @returns {import('rollup').Plugin} - An instance of the `clean` Rollup plugin.\r\n * @see https://rollupjs.org/plugin-development/#plugins-overview RollupJS.org - Plugin Development\r\n * @see https://rollupjs.org/plugin-development/#build-hooks RollupJS.org - Build Hooks\r\n */\r\nexport default function clean( paths ) {\r\n    if ( isArray( paths, true, p => isString( p, true ) ) ) {\r\n        // noinspection JSValidateTypes - buildStart is not recognized as a known property despite it being a valid hook\r\n        return {\r\n            name: \"clean\",\r\n            buildStart: {\r\n                order: \"pre\",\r\n                sequential: true,\r\n                async handler() {\r\n                    await performClean( this, paths );\r\n                }\r\n            }\r\n        };\r\n    } else {\r\n        return {\r\n            name: \"clean\",\r\n            renderStart: {\r\n                order: \"pre\",\r\n                sequential: true,\r\n                async handler( options ) {\r\n                    const path = options.dir ?? dirname( options.file );\r\n                    await performClean( this, [ path ] );\r\n                }\r\n            }\r\n        };\r\n    }\r\n};"],"names":["clean","paths","isArray","p","isString","name","buildStart","order","sequential","handler","performClean","renderStart","options","path","dir","dirname","file"],"mappings":";;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,KAAKA,CAAEC,KAAK,EAAG;AACnC,EAAA,IAAKC,OAAO,CAAED,KAAK,EAAE,IAAI,EAAEE,CAAC,IAAIC,QAAQ,CAAED,CAAC,EAAE,IAAK,CAAE,CAAC,EAAG;AACpD;IACA,OAAO;AACHE,MAAAA,IAAI,EAAE,OAAO;AACbC,MAAAA,UAAU,EAAE;AACRC,QAAAA,KAAK,EAAE,KAAK;AACZC,QAAAA,UAAU,EAAE,IAAI;QAChB,MAAMC,OAAOA,GAAG;AACZ,UAAA,MAAMC,YAAY,CAAE,IAAI,EAAET,KAAM,CAAC,CAAA;AACrC,SAAA;AACJ,OAAA;KACH,CAAA;AACL,GAAC,MAAM;IACH,OAAO;AACHI,MAAAA,IAAI,EAAE,OAAO;AACbM,MAAAA,WAAW,EAAE;AACTJ,QAAAA,KAAK,EAAE,KAAK;AACZC,QAAAA,UAAU,EAAE,IAAI;QAChB,MAAMC,OAAOA,CAAEG,OAAO,EAAG;UACrB,MAAMC,MAAI,GAAGD,OAAO,CAACE,GAAG,IAAIC,YAAO,CAAEH,OAAO,CAACI,IAAK,CAAC,CAAA;AACnD,UAAA,MAAMN,YAAY,CAAE,IAAI,EAAE,CAAEG,MAAI,CAAG,CAAC,CAAA;AACxC,SAAA;AACJ,OAAA;KACH,CAAA;AACL,GAAA;AACJ;;;;"}