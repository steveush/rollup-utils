{"version":3,"file":"Importer.cjs","sources":["../../../src/utils/Importer.js"],"sourcesContent":["import { createFilter } from \"@rollup/pluginutils\";\r\nimport { fileURLToPath } from \"url\";\r\nimport { basename, dirname, isAbsolute, join, relative, resolve, extname } from \"path\";\r\nimport MagicString from \"magic-string\";\r\n\r\nimport getEntryInfo from \"./getEntryInfo.js\";\r\nimport getImportedIds from \"./getImportedIds.js\";\r\nimport isFilterPattern from \"./isFilterPattern.js\";\r\n\r\nimport isFunction from \"./internal/isFunction.js\";\r\nimport isNonNullable from \"./internal/isNonNullable.js\";\r\nimport isPOJO from \"./internal/isPOJO.js\";\r\nimport isString from \"./internal/isString.js\";\r\nimport hasKeys from \"./internal/hasKeys.js\";\r\nimport SourceMap from \"./SourceMap.js\";\r\n\r\n//region Type Definitions\r\n\r\n/**\r\n * An object representing a module created by the Importer class.\r\n *\r\n * @typedef {object} ImporterModule\r\n * @property {string} id - The module id. This is the absolute path to the source file.\r\n * @property {string} type - The type of import to use for this module. If `\"default\"` then no `with { type }` syntax was used.\r\n * @property {string} fileName - The relative file name for the module, this is combined with the output directory to create a final path.\r\n * @property {string} code - The source code for the module.\r\n * @property {SourceMap} [map] - If the code has been transformed this should contain the source map output by that transformation.\r\n */\r\n\r\n/**\r\n * An object containing the transformed code and an optional source map, otherwise `null`.\r\n *\r\n * @typedef {{code: string, map?: SourceMap}|null} ImporterResult\r\n */\r\n\r\n/**\r\n * Process the raw source code applying any transformations like running preprocessors.\r\n *\r\n * @callback ImporterTransformCallback\r\n * @this {Importer} - The current instance of the importer.\r\n * @param {import('rollup').TransformPluginContext} ctx - The current Rollup plugin context.\r\n * @param {string} code - The source code to process.\r\n * @param {string} id - The module id of the file being processed.\r\n * @returns {string | MagicString | ImporterResult} - The transformed result.\r\n */\r\n\r\n/**\r\n * Combine the modules into a single result.\r\n *\r\n * @callback ImporterBundleCallback\r\n * @this {Importer} - The current instance of the importer.\r\n * @param {import('rollup').PluginContext} ctx - The current Rollup plugin context.\r\n * @param {ReadonlyArray<ImporterModule>} modules - The modules to bundle together.\r\n * @param {string} fileName - The output file name for the bundle.\r\n * @returns {string | MagicString | ImporterResult} - The transformed result.\r\n */\r\n\r\n/**\r\n * Produce an inline JavaScript representation of a modules code.\r\n *\r\n * This allows for special handling of imports using the `with { type }` syntax.\r\n *\r\n * @callback ImporterTypeCallback\r\n * @this {Importer} - The current instance of the importer.\r\n * @param {import('rollup').TransformPluginContext} ctx - The current Rollup plugin context.\r\n * @param {ImporterModule} module - The module to produce inline JavaScript for.\r\n * @returns {string | MagicString | ImporterResult} - The inline JavaScript for the module.\r\n */\r\n\r\n/**\r\n * Determine whether a module should be operated upon.\r\n *\r\n * This function is the result of a call to the Rollup {@link import('@rollup/pluginutils').createFilter|createFilter} method.\r\n *\r\n * @callback ImporterMatches\r\n * @param {string} id - The id of the module to check.\r\n * @returns {boolean} `true` if the id matches the filter, otherwise `false`.\r\n */\r\n\r\n/**\r\n * The options for the Importer class.\r\n *\r\n * @typedef {object} ImporterOptions\r\n * @property {import('@rollup/pluginutils').FilterPattern} [include] - A valid picomatch glob pattern, or array of patterns of files to include. Defaults to `null`.\r\n * @property {import('@rollup/pluginutils').FilterPattern} [exclude] - A valid picomatch glob pattern, or array of patterns of files to exclude. Defaults to `null`.\r\n * @property {string|null} [output] - The output file name for the bundle. If not supplied, the bundle is not created. Defaults to `null`.\r\n * @property {boolean} [outputEmpty] - Create a file even if the output is empty. Defaults to `false`.\r\n * @property {boolean} [sourcemapInlined] - Create source maps for modules that have been converted to inline JavaScript. Defaults to `false`.\r\n * @property {\"single\"|\"multiline\"} [sourcemapComments] - Specifies the source map comment style. Defaults to `\"single\"`.\r\n * @property {ImporterTransformCallback} [transform] - A callback to process the raw source code applying any transformations like running preprocessors.\r\n * @property {ImporterBundleCallback} [bundle] - A callback to combine the modules into a single result.\r\n * @property {Record<string, ImporterTypeCallback>} [types] - An object containing a mapping of type names to transform callbacks to change the processed source code into JavaScript inlined code.\r\n */\r\n\r\n//endregion\r\n\r\n/**\r\n * The default options for the Importer class.\r\n *\r\n * @type {Readonly<ImporterOptions>}\r\n */\r\nconst IMPORTER_DEFAULTS = Object.freeze( {\r\n    include: null,\r\n    exclude: null,\r\n    output: null,\r\n    outputEmpty: false,\r\n    sourcemapInlined: false,\r\n    sourcemapComments: \"single\",\r\n    transform: ( ctx, code ) => {\r\n        return { code };\r\n    },\r\n    bundle: ( ctx, modules ) => {\r\n        return modules.reduce( ( result, module, i ) => {\r\n            if ( i !== 0 ) result.code += \"\\n\";\r\n            result.code += module.code;\r\n            if ( module.map instanceof SourceMap ) {\r\n                result.map = SourceMap.merge( result.map, module.map );\r\n            }\r\n            return result;\r\n        }, { code: \"\", map: undefined } );\r\n    },\r\n    types: {\r\n        default: ( ctx, module ) => {\r\n            return new MagicString( module.code )\r\n                .replaceAll( /`/g, \"\\\\`\" )\r\n                .prepend( \"export default `\" )\r\n                .append( \"`;\" );\r\n        }\r\n    }\r\n} );\r\n\r\n/**\r\n * A utility class to help create Rollup plugins for importing and transforming text files.\r\n *\r\n * @param {ImporterOptions} options - The options to supply for this instance of the class. The only required option is the \"include\" pattern.\r\n * @see https://rollupjs.org/plugin-development/ RollupJS.org - Plugin Development\r\n */\r\nexport default class Importer {\r\n    // region Static\r\n\r\n    /**\r\n     * The readonly default options for this class.\r\n     *\r\n     * @type {Readonly<ImporterOptions>}\r\n     * @readonly\r\n     */\r\n    static get defaults() {\r\n        return IMPORTER_DEFAULTS;\r\n    };\r\n\r\n    /**\r\n     * Merge multiple partial options into a new options object based on the defaults. The original objects are not mutated.\r\n     *\r\n     * Values are assigned left to right, meaning the last objects properties will override those that came before it.\r\n     *\r\n     * @param {...ImporterOptions} options - Any number of option objects to merge.\r\n     * @return {ImporterOptions} - The merged options object.\r\n     */\r\n    static options( ...options ) {\r\n        return options.reduce( ( result, current ) => {\r\n            if ( isPOJO( current ) ) {\r\n                return {\r\n                    ...result,\r\n                    ...current,\r\n                    types: {\r\n                        ...result.types,\r\n                        ...( current?.types ?? {} )\r\n                    }\r\n                };\r\n            }\r\n            return result;\r\n        }, {\r\n            ...this.defaults,\r\n            types: {\r\n                ...this.defaults.types\r\n            }\r\n        } );\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region Constructor\r\n\r\n    /**\r\n     * Create a new instance of the class with the given options.\r\n     *\r\n     * @param {ImporterOptions} [options] - The options to supply for this instance of the class. The only required option is the \"include\" pattern.\r\n     */\r\n    constructor( options = {} ) {\r\n        this.#options = this.constructor.options( options );\r\n        if ( !isFilterPattern( this.options.include ) )\r\n            throw new Error( \"The `include` option is required.\" );\r\n\r\n        this.#matches = createFilter( this.options.include, this.options.exclude );\r\n        if ( !isFunction( this.#matches ) )\r\n            throw new Error( \"Unexpected result from a call to `createFilter`. Check the values passed for the `include` and `exclude` options are valid filter patterns.\" );\r\n\r\n        this.#cache = new Map();\r\n    }\r\n\r\n    /**\r\n     * @type {T}\r\n     * @private\r\n     */\r\n    #options;\r\n    /**\r\n     * @type {Map<string, ImporterModule>}\r\n     * @private\r\n     */\r\n    #cache;\r\n    /**\r\n     * @type {ImporterMatches}\r\n     * @private\r\n     */\r\n    #matches;\r\n\r\n    //endregion\r\n\r\n    //region Properties\r\n\r\n    /**\r\n     * Get the combined options to use for this instance.\r\n     *\r\n     * @return {T}\r\n     */\r\n    get options() {\r\n        return this.#options;\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the module cache for this instance.\r\n     *\r\n     * @returns {Map<string, ImporterModule>}\r\n     */\r\n    get cache() {\r\n        return this.#cache;\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region Build Hooks\r\n\r\n    /**\r\n     * Performs transformations on the provided code if the id matches the include and exclude patterns for this instance.\r\n     *\r\n     * The first processes the raw source code applying any transformations like running preprocessors.\r\n     *\r\n     * The second changes the processed module code into JavaScript inlined code if required.\r\n     *\r\n     * @param {import('rollup').TransformPluginContext} ctx - The current Rollup plugin context.\r\n     * @param {string} code - The source code to process.\r\n     * @param {string} id - The module id being processed.\r\n     * @returns {import('rollup').TransformResult} - The result of the transform.\r\n     *\r\n     * @see https://rollupjs.org/plugin-development/#transform RollupJS.org - transform\r\n     */\r\n    transform( ctx, code, id ) {\r\n        // return undefined for all non-matching modules so that they can undergo default or additional plugin processing\r\n        if ( !this.matches( id ) ) return;\r\n\r\n        const module = this.makeModule( ctx, id, code );\r\n        if ( !isNonNullable( module ) ) {\r\n            this.cache.delete( id );\r\n            return null;\r\n        }\r\n        this.cache.set( id, module );\r\n\r\n        if ( hasKeys( this.options.types, { [ module.type ]: isFunction } ) ) {\r\n            const result = this.options.types[ module.type ].call( this, ctx, module );\r\n            const transform = this.makeResult( result, module.id, module.map );\r\n            if ( transform !== null ) {\r\n                if ( this.options.sourcemapInlined && transform.map instanceof SourceMap ) {\r\n                    return {\r\n                        code: transform.code,\r\n                        map: transform.map\r\n                    };\r\n                }\r\n                return {\r\n                    code: transform.code,\r\n                    map: { mappings: \"\" }\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // noinspection SpellCheckingInspection - issues with @see urls\r\n    /**\r\n     * Modifies the output options to add source maps created for importer modules to the `x_google_ignoreList`.\r\n     *\r\n     * This is achieved by modifying the {@link https://rollupjs.org/configuration-options/#output-sourcemapignorelist|sourcemapIgnoreList} option,\r\n     * if a function is already supplied it is wrapped returning the result of the original function or whether the\r\n     * relativeSourcePath belongs to an importer module.\r\n     *\r\n     * @param {import('rollup').PluginContext} ctx - The current Rollup plugin context.\r\n     * @param {import('rollup').OutputOptions} options - The current Rollup output options.\r\n     * @returns {import('rollup').OutputOptions|null} - The modified output options object, otherwise `null`.\r\n     *\r\n     * @see https://rollupjs.org/plugin-development/#outputoptions RollupJS.org - outputOptions\r\n     */\r\n    outputOptions( ctx, options ) {\r\n        // always add the sourcemaps handled by this transform instance to the Rollup ignore list\r\n        if ( isFunction( options.sourcemapIgnoreList ) ) {\r\n            const original = options.sourcemapIgnoreList;\r\n            options.sourcemapIgnoreList = ( relativeSourcePath, sourcemapPath ) => {\r\n                return original( relativeSourcePath, sourcemapPath ) || this.matches( resolve( relativeSourcePath ) );\r\n            };\r\n        } else {\r\n            options.sourcemapIgnoreList = relativeSourcePath => this.matches( resolve( relativeSourcePath ) );\r\n        }\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Generates a bundle containing all side effect only importer modules.\r\n     *\r\n     * Side effect only modules are those that are imported without declaring a local variable. i.e. `import \"text.txt\"`\r\n     *\r\n     * @param {import('rollup').PluginContext} ctx - The current Rollup plugin context.\r\n     * @param {import('rollup').NormalizedOutputOptions} options - The normalized Rollup output options.\r\n     * @param {import('rollup').OutputBundle} bundle - The Rollup output bundle.\r\n     * @param {boolean} isWrite - A boolean determining if the current operation should write output files.\r\n     *\r\n     * @see https://rollupjs.org/plugin-development/#generatebundle RollupJS.org - generateBundle\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import MDN - import\r\n     */\r\n    generateBundle( ctx, options, bundle, isWrite ) {\r\n        if ( !isWrite ) return;\r\n        const modules = this.getBundleModules( ctx, bundle );\r\n        if ( options.preserveModules ) {\r\n            modules.forEach( module => this.emitModule( ctx, options, module ) );\r\n        } else {\r\n            const bundled = this.makeBundle( ctx, options, modules );\r\n            if ( bundled !== null ) {\r\n                this.emitModule( ctx, options, bundled );\r\n            }\r\n        }\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region Helper Methods\r\n\r\n    /**\r\n     * Check if a module id matches the filter function created using the include and exclude options.\r\n     *\r\n     * @param {string} id - The id of the module to check.\r\n     * @returns {boolean} - `true` if the id matches the filter, otherwise `false`.\r\n     */\r\n    matches( id ) {\r\n        return this.#matches( id );\r\n    }\r\n\r\n    /**\r\n     * Check if the supplied code should be output. This takes into account the `outputEmpty` option.\r\n     *\r\n     * @param {string} code - The source code to check.\r\n     * @returns {boolean} - `true` if the code should be output, otherwise `false`.\r\n     */\r\n    shouldOutput( code ) {\r\n        return this.options.outputEmpty || isString( code, true );\r\n    }\r\n\r\n    /**\r\n     * Make an importer result object from a given value.\r\n     *\r\n     * @param {string | MagicString | ImporterResult} value - The value to convert to a transform result.\r\n     * @param {string} sourcePath - The absolute path of the file being transformed. This is only used when dealing with a MagicString value.\r\n     * @param {SourceMap} [currentMap] - If the file being transformed has a pre-existing source map it can be provided here and will be merged. This is only used when dealing with a MagicString value.\r\n     * @returns {ImporterResult} - The importer result, otherwise `null` if the value could not be parsed.\r\n     */\r\n    makeResult( value, sourcePath, currentMap ) {\r\n        if ( isString( value ) ) {\r\n            return { code: value };\r\n        }\r\n        if ( hasKeys( value, { code: isString } ) ) {\r\n            return value;\r\n        }\r\n        if ( value instanceof MagicString && isAbsolute( sourcePath ) ) {\r\n            return {\r\n                code: value.toString(),\r\n                map: SourceMap.merge( currentMap, value.generateMap( {\r\n                    file: basename( sourcePath ) + \".map\",\r\n                    source: sourcePath,\r\n                    includeContent: true\r\n                } ) )\r\n            };\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Make an importer module object.\r\n     *\r\n     * @param {import('rollup').TransformPluginContext} ctx - The current Rollup plugin context.\r\n     * @param {string} id - The module id being processed.\r\n     * @param {string} code - The code to process.\r\n     * @returns {ImporterModule|null} - The importer module, otherwise `null` if the module could not be parsed.\r\n     */\r\n    makeModule( ctx, id, code ) {\r\n        const module = ctx.getModuleInfo( id );\r\n        if ( !module ) {\r\n            ctx.error( `Unable to retrieve the module info for moduleId = \"${ id }\".` );\r\n            return null;\r\n        }\r\n        const entry = getEntryInfo( ctx, module.id );\r\n        if ( !entry ) {\r\n            ctx.error( `Unable to retrieve the entry info for moduleId = \"${ module.id }\".` );\r\n            return null;\r\n        }\r\n\r\n        if ( isFunction( this.options.transform ) ) {\r\n            const callbackResult = this.options.transform.call( this, ctx, code, id );\r\n            const transformed = this.makeResult( callbackResult, id );\r\n            if ( transformed !== null ) {\r\n                return {\r\n                    id,\r\n                    type: module.attributes?.type ?? \"default\",\r\n                    fileName: relative( dirname( entry.id ), module.id ),\r\n                    code: transformed.code,\r\n                    map: transformed.map\r\n                };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Make a bundle from multiple importer modules.\r\n     *\r\n     * @param {import('rollup').PluginContext} ctx - The current Rollup plugin context.\r\n     * @param {import('rollup').NormalizedOutputOptions} options - The normalized Rollup output options.\r\n     * @param {ReadonlyArray<ImporterModule>} modules - A readonly array of importer modules.\r\n     * @returns {ImporterModule|null} - The combined importer bundle module, otherwise `null`.\r\n     */\r\n    makeBundle( ctx, options, modules ) {\r\n        if ( isString( this.options.output, true ) ) {\r\n            const path = this.getBundlePath( options );\r\n            if ( path === null || !isAbsolute( path ) ) {\r\n                ctx.warn( 'Unable to create bundle, make sure either a \"output.dir\" or \"output.file\" option is specified.' );\r\n                return null;\r\n            }\r\n            const ext = extname( path );\r\n            const name = basename( path, ext );\r\n            const fileName = this.options.output.replaceAll( \"[name]\", name ).replaceAll( \"[ext]\", ext );\r\n\r\n            if ( isFunction( this.options.bundle ) ) {\r\n                const result = this.options.bundle.call( this, ctx, modules, fileName );\r\n                const bundled = this.makeResult( result, fileName );\r\n                if ( bundled !== null ) {\r\n                    return {\r\n                        id: fileName,\r\n                        type: \"default\",\r\n                        fileName: fileName,\r\n                        code: bundled.code,\r\n                        map: bundled.map\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get the absolute path to where the bundle file will be output.\r\n     *\r\n     * @param {import('rollup').NormalizedOutputOptions} options - The normalized Rollup output options.\r\n     * @returns {string|null} - The absolute path to the bundle file, otherwise `null`.\r\n     */\r\n    getBundlePath( options ) {\r\n        let path = null;\r\n        if ( isString( options.file, true ) ) {\r\n            path = options.file;\r\n        }\r\n        if ( isString( options.dir, true ) ) {\r\n            path = join( options.dir, \"bundle.js\" );\r\n        }\r\n        if ( isString( path ) ) {\r\n            return resolve( path );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get all importer modules that were created but are not included in the current output bundle.\r\n     *\r\n     * @remarks\r\n     * Finds all modules imported without a variable assignment, i.e. modules with side effects.\r\n     *\r\n     * e.g. `import \"some-file.txt\"` NOT `import val from \"some-file.txt\"`\r\n     *\r\n     * @param {import('rollup').PluginContext} ctx - The current Rollup plugin context.\r\n     * @param {import('rollup').OutputBundle} bundle - The Rollup output bundle.\r\n     * @return {ReadonlyArray<ImporterModule>} - A readonly array of importer modules.\r\n     */\r\n    getBundleModules( ctx, bundle ) {\r\n        const entryId = Object.values( bundle ).find( assetOrChunk => assetOrChunk.type === \"chunk\" && typeof assetOrChunk.facadeModuleId === \"string\" )?.facadeModuleId ?? null;\r\n        if ( !entryId ) return Object.freeze( [] );\r\n\r\n        // create a flat object containing all rendered modules in the output bundle\r\n        const renderedModules = Object.keys( bundle ).reduce( ( modules, fileName ) => Object.assign( modules, bundle[ fileName ].modules ), {} );\r\n        // create a filter callback that checks if the given id has been rendered and whether the supplied code should be output.\r\n        const isNotBundled = ( { id, code } ) => !renderedModules[ id ] && this.shouldOutput( code );\r\n\r\n        // we need to get the order the modules were imported in to ensure we have no issues in the output code\r\n        const importedIds = getImportedIds( ctx, entryId, true );\r\n        // create a sort comparer that uses the module ids to ensure the array is sorted into the import order\r\n        const byImportedOrder = ( { id: a }, { id: b } ) => importedIds.indexOf( a ) - importedIds.indexOf( b );\r\n\r\n        const modules = Array.from( this.#cache.values() )\r\n            .filter( isNotBundled )\r\n            .sort( byImportedOrder );\r\n\r\n        return Object.freeze( modules );\r\n    }\r\n\r\n    /**\r\n     * Perform some checks on a module and additional source map processing before it is output.\r\n     *\r\n     * @param {import('rollup').PluginContext} ctx - The current Rollup plugin context.\r\n     * @param {import('rollup').NormalizedOutputOptions} options - The normalized Rollup output options.\r\n     * @param {ImporterModule} module - The module to emit.\r\n     */\r\n    emitModule( ctx, options, module ) {\r\n        if ( module !== null && this.shouldOutput( module.code ) ) {\r\n            let outputSourceMap = this.prepareSourceMap( ctx, options, module );\r\n            ctx.emitFile( {\r\n                type: \"asset\",\r\n                fileName: module.fileName,\r\n                source: module.code\r\n            } );\r\n            if ( outputSourceMap ) {\r\n                ctx.emitFile( {\r\n                    type: \"asset\",\r\n                    fileName: module.fileName + \".map\",\r\n                    source: module.map.toString()\r\n                } );\r\n            }\r\n        }\r\n    }\r\n\r\n    // noinspection SpellCheckingInspection - issues with @link urls\r\n    /**\r\n     * Prepares a source map just prior to module being output.\r\n     *\r\n     * This method takes into account the Rollup {@link https://rollupjs.org/configuration-options/#output-sourcemap|sourcemap}\r\n     * and {@link https://rollupjs.org/configuration-options/#output-sourcemappathtransform|sourcemapPathTransform} options\r\n     *\r\n     * @param {import('rollup').PluginContext} ctx - The current Rollup plugin context.\r\n     * @param {import('rollup').NormalizedOutputOptions} options - The normalized Rollup output options.\r\n     * @param {ImporterModule} module - The module to prepare.\r\n     * @returns {boolean} - `true` if the map for the supplied module should be output, otherwise `false`.\r\n     */\r\n    prepareSourceMap( ctx, options, module ) {\r\n        if ( Boolean( options.sourcemap ) && module.map instanceof SourceMap ) {\r\n            const dir = options.dir ?? dirname( options.file );\r\n            const filePath = resolve( join( dir, module.fileName ) );\r\n            const sourcemapPath = filePath + \".map\";\r\n\r\n            // use the basename of the absolute path as the file value as the location of the source map is assumed to be adjacent to the bundle.\r\n            module.map.file = basename( filePath );\r\n            module.map.sources = module.map.sources.map( source => {\r\n                if ( isString( source, true ) ) {\r\n                    if ( isString( module.map.sourceRoot, true ) ) source = join( module.map.sourceRoot, source );\r\n                    if ( isString( source ) && source.startsWith( \"file:\" ) ) source = fileURLToPath( source );\r\n                    if ( !isAbsolute( source ) ) source = resolve( source );\r\n\r\n                    const relativeSourcePath = relative( dir, source ).replace( /[\\/\\\\]/g, \"/\" );\r\n                    if ( isFunction( options.sourcemapPathTransform ) ) {\r\n                        return options.sourcemapPathTransform( relativeSourcePath, sourcemapPath );\r\n                    }\r\n                    return relativeSourcePath;\r\n                }\r\n                return source;\r\n            } );\r\n\r\n            const multiline = this.options.sourcemapComments === \"multiline\";\r\n            if ( options.sourcemap === true ) {\r\n                module.code = SourceMap.setComment( module.code, module.map.file + \".map\", multiline );\r\n            }\r\n            if ( options.sourcemap === \"inline\" ) {\r\n                module.code = SourceMap.setComment( module.code, module.map.toUrl(), multiline );\r\n            }\r\n            return options.sourcemap === true || options.sourcemap === \"hidden\";\r\n        }\r\n        return false;\r\n    }\r\n};"],"names":["IMPORTER_DEFAULTS","Object","freeze","include","exclude","output","outputEmpty","sourcemapInlined","sourcemapComments","transform","ctx","code","bundle","modules","reduce","result","module","i","map","SourceMap","merge","undefined","types","default","MagicString","replaceAll","prepend","append","Importer","defaults","options","_len","arguments","length","Array","_key","current","isPOJO","constructor","isFilterPattern","Error","createFilter","isFunction","Map","cache","id","matches","makeModule","isNonNullable","delete","set","hasKeys","type","call","makeResult","mappings","outputOptions","sourcemapIgnoreList","original","relativeSourcePath","sourcemapPath","resolve","generateBundle","isWrite","getBundleModules","preserveModules","forEach","emitModule","bundled","makeBundle","shouldOutput","isString","value","sourcePath","currentMap","isAbsolute","toString","generateMap","file","basename","source","includeContent","getModuleInfo","error","entry","getEntryInfo","callbackResult","transformed","attributes","fileName","relative","dirname","path","getBundlePath","warn","ext","extname","name","dir","join","entryId","values","find","assetOrChunk","facadeModuleId","renderedModules","keys","assign","isNotBundled","_ref","importedIds","getImportedIds","byImportedOrder","_ref2","_ref3","a","b","indexOf","from","filter","sort","outputSourceMap","prepareSourceMap","emitFile","Boolean","sourcemap","filePath","sources","sourceRoot","startsWith","fileURLToPath","replace","sourcemapPathTransform","multiline","setComment","toUrl"],"mappings":"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"}